/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package views.patient;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import utils.DBConnection;

public class Prescription extends JFrame {
    private String patientId;
    private JTable prescriptionTable;
    private JTextField tfMaDT, tfMaDS, tfMaBS, tfNgayBan, tfThanhTien, tfTrangThaiTT;
    private DefaultTableModel model;

    public Prescription(String patientId) throws SQLException, ClassNotFoundException {
        this.patientId = patientId;
        
        setTitle("üìÑ Danh s√°ch ƒë∆°n thu·ªëc");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        // Co theo k√≠ch th∆∞·ªõc m√†n h√¨nh (ƒë·ªÅ xu·∫•t)
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(screenSize.width, screenSize.height); // full m√†n h√¨nh
     
        initComponents();
        loadPrescription();
    }
    
    private JPanel createLabeledField(String labelText, JTextField textField, Font font, Color color) {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setBackground(new Color(0xCDE8E5)); ///////////////

        JLabel label = new JLabel(labelText);
        label.setFont(font);
        label.setForeground(color);

        textField.setFont(new Font("Segoe UI", Font.PLAIN, 14));

        panel.add(label, BorderLayout.NORTH);
        panel.add(textField, BorderLayout.CENTER);
        return panel;
    }


    private void initComponents() {
        setLayout(new BorderLayout(10, 10));
        
        // ===== T·∫†O PANEL CH·ª®A TI√äU ƒê·ªÄ V√Ä THANH T√åM KI·∫æM =====
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout());
        
        // TITLE
        JPanel titlePanel = new JPanel(new BorderLayout());
        JLabel title = new JLabel("DANH S√ÅCH ƒê∆†N THU·ªêC", JLabel.CENTER);
        title.setFont(new Font("Arial", Font.BOLD, 40));
        title.setForeground(new Color(0x78a2a7));
        title.setBackground(new Color(0xe8faf8));
        title.setOpaque(true);
        titlePanel.add(title, BorderLayout.CENTER);

        topPanel.add(titlePanel, BorderLayout.NORTH);

        // ===== SEARCH PANEL =====
        JPanel searchPanel = new JPanel(new BorderLayout());
        searchPanel.setBackground(new Color(0xCDE8E5));
        searchPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // ===== PANEL CH·ª®A N√öT ·ªû GI·ªÆA =====
        JPanel nameSearchPanel = new JPanel();
        nameSearchPanel.setBackground(new Color(0xCDE8E5));
        nameSearchPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));

        JButton btnSearch = new JButton("T√¨m ki·∫øm");
        btnSearch.setFont(new Font("Segoe UI", Font.BOLD, 15));
        btnSearch.setBackground(new Color(0x78a2a7));
        btnSearch.setForeground(Color.WHITE);
        btnSearch.setPreferredSize(new Dimension(300, 30));

        // Hover effect
        btnSearch.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                btnSearch.setBackground(new Color(0xff9800));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btnSearch.setBackground(new Color(0x78a2a7));
            }
        });

        nameSearchPanel.add(btnSearch);
        
        searchPanel.add(nameSearchPanel, BorderLayout.NORTH);
        
        // ========== C√ÅC TH√ÄNH PH·∫¶N KH√ÅC ==========
        JPanel searchFieldsPanel = new JPanel(new GridLayout(2, 3, 15, 15));
        searchFieldsPanel.setBackground(new Color(0xCDE8E5));

        tfMaDT = new JTextField();
        tfMaDS = new JTextField();
        tfMaBS = new JTextField();
        tfNgayBan = new JTextField();
        tfThanhTien = new JTextField();
        tfTrangThaiTT = new JTextField();
        
        Font labelFont = new Font("Segoe UI", Font.BOLD, 14);
        Color labelColor = Color.BLACK;

        searchFieldsPanel.add(createLabeledField("M√£ ƒë∆°n thu·ªëc:", tfMaDT, labelFont, labelColor));
        searchFieldsPanel.add(createLabeledField("M√£ d∆∞·ª£c sƒ©:", tfMaDS, labelFont, labelColor));
        searchFieldsPanel.add(createLabeledField("M√£ b√°c sƒ©:", tfMaBS, labelFont, labelColor));
        searchFieldsPanel.add(createLabeledField("Ng√†y b√°n:", tfNgayBan, labelFont, labelColor));
        searchFieldsPanel.add(createLabeledField("Th√†nh ti·ªÅn:", tfThanhTien, labelFont, labelColor));
        searchFieldsPanel.add(createLabeledField("Tr·∫°ng th√°i ƒë∆°n thu·ªëc:", tfTrangThaiTT, labelFont, labelColor));

        searchPanel.add(searchFieldsPanel, BorderLayout.CENTER);
        topPanel.add(searchPanel, BorderLayout.CENTER);
        add(topPanel, BorderLayout.NORTH); 

        // ===== TABLE: DANH S√ÅCH ƒê∆†N THU·ªêC =====
        String[] columns = {"M√£ ƒë∆°n thu·ªëc", "M√£ d∆∞·ª£c sƒ©", "M√£ b√°c sƒ©", "M√£ b·ªánh nh√¢n", "Gi·ªõi t√≠nh b·ªánh nh√¢n", "Ng√†y sinh b·ªánh nh√¢n",
                            "L·ªãch s·ª≠ b·ªánh l√Ω b·ªánh nh√¢n", "D·ªã ·ª©ng b·ªánh nh√¢n", "File ƒê∆°n Thu·ªëc", "Ghi ch√∫", "Ng√†y b√°n", "Th√†nh ti·ªÅn", 
                            "Tr·∫°ng th√°i thanh to√°n"};
        
        model = new DefaultTableModel(columns, 0);
        prescriptionTable = new JTable(model);
        prescriptionTable.setRowHeight(28); //chi·ªÅu cao m·ªói h√†ng 
        prescriptionTable.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        prescriptionTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        prescriptionTable.getTableHeader().setBackground(new Color(0xCDE8E5));
        prescriptionTable.getTableHeader().setForeground(Color.BLACK);
        prescriptionTable.getColumnModel().getColumn(9).setCellRenderer(new BillStatusCellRenderer());

        JScrollPane scrollPane = new JScrollPane(prescriptionTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(20, 40, 20, 40));
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setBackground(new Color(0xD9EEF2));
        scrollPane.setBorder(new LineBorder(new Color(222, 246, 186)));
        
        add(scrollPane, BorderLayout.CENTER);

        // ===== S·ª∞ KI·ªÜN T√åM KI·∫æM =====
        btnSearch.addActionListener(e -> {
            try {
                loadPrescription(); // G·ªçi ƒë√∫ng h√†m ƒëang d√πng t·∫•t c·∫£ c√°c JTextField ƒë·ªÉ l·ªçc
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(ProductView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "L·ªói khi t√¨m ki·∫øm d·ªãch v·ª•.");
            }
        });


        // ===== CLICK XEM CHI TI·∫æT =====
        prescriptionTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = prescriptionTable.getSelectedRow();
                if (selectedRow != -1) {
                    showPrescriptionDetails(selectedRow);
                }
            }
        });
    }

    private void loadPrescription() throws SQLException, ClassNotFoundException {
        model.setRowCount(0);
        StringBuilder sql = new StringBuilder("SELECT * FROM DONTHUOC_DONTHUOCYC WHERE MABN = ?");
        
        java.util.List<Object> params = new java.util.ArrayList<>();
        params.add(patientId);
        
        if (!tfMaDT.getText().trim().isEmpty()) {
            sql.append(" AND UPPER(MADT) LIKE ?");
            params.add("%" + tfMaDT.getText().trim().toUpperCase() + "%");
        }
        if (!tfMaDS.getText().trim().isEmpty()) {
            sql.append(" AND UPPER(MADS) LIKE ?");
            params.add("%" + tfMaDS.getText().trim().toUpperCase() + "%");
        }
        if (!tfMaBS.getText().trim().isEmpty()) {
            sql.append(" AND UPPER(MABS) LIKE ?");
            params.add("%" + tfMaBS.getText().trim().toUpperCase() + "%");
        }
         if (!tfNgayBan.getText().trim().isEmpty()) {
            sql.append(" AND TO_CHAR(NGAYBAN, 'YYYY-MM-DD') = ?");
            params.add(tfNgayBan.getText().trim());
        }
         if (!tfThanhTien.getText().trim().isEmpty()) {
            sql.append(" AND UPPER(THANHTIEN) LIKE ?");
            params.add("%" + tfThanhTien.getText().trim().toUpperCase() + "%");
        }
         if (!tfTrangThaiTT.getText().trim().isEmpty()) {
            sql.append(" AND UPPER(TRANGTHAITT) LIKE ?");
            params.add("%" + tfTrangThaiTT.getText().trim().toUpperCase() + "%");
        }
         

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            for (int i = 0; i < params.size(); i++) {
                ps.setObject(i + 1, params.get(i));
            }

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("MADT"),
                    rs.getString("MADS"),
                    rs.getString("MABS"),
                    rs.getString("MABN"),
                    rs.getString("GIOITINHBN"),
                    rs.getString("NGAYSINHBN"),
                    rs.getString("LICHSU_BENHLY_BN"),
                    rs.getString("DIUNGBN"),
                    rs.getBlob("FILEDONTHUOC"),
                    rs.getString("GHICHU"),
                    rs.getString("NGAYBAN"),
                    rs.getString("THANHTIEN"),
                    rs.getString("TRANGTHAITT"),
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "L·ªói t·∫£i d·ªØ li·ªáu: " + e.getMessage());
        }
    }

    
    private void showPrescriptionDetails(int row) {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Chi ti·∫øt ƒë∆°n thu·ªëc", true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        JPanel contentPanel = new JPanel();
        contentPanel.setBackground(new Color(0xd9eef2)); // N·ªÅn h·ªôp tho·∫°i
        contentPanel.setLayout(new BorderLayout(10, 10));
        contentPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < model.getColumnCount(); i++) {
            sb.append(model.getColumnName(i)).append(": ")
              .append(model.getValueAt(row, i)).append("\n");
        }

        JTextPane textPane = new JTextPane();
        textPane.setEditable(false);
        textPane.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        textPane.setBackground(Color.WHITE);
        textPane.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));;
        
        StyledDocument doc = textPane.getStyledDocument();

        // Style in ƒë·∫≠m cho ti√™u ƒë·ªÅ c·ªôt
        SimpleAttributeSet boldAttr = new SimpleAttributeSet();
        StyleConstants.setBold(boldAttr, true);

        // Style b√¨nh th∆∞·ªùng cho gi√° tr·ªã
        SimpleAttributeSet normalAttr = new SimpleAttributeSet();
        StyleConstants.setBold(normalAttr, false);

        for (int i = 0; i < model.getColumnCount(); i++) {
            try {
                doc.insertString(doc.getLength(), model.getColumnName(i) + ": ", boldAttr);  // In ƒë·∫≠m t√™n c·ªôt
                doc.insertString(doc.getLength(), model.getValueAt(row, i) + "\n", normalAttr); // Gi√° tr·ªã b√¨nh th∆∞·ªùng
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        }
        
        try {
            Connection conn = DBConnection.getConnection();
            Statement stmt = conn.createStatement();
            String maDT = model.getValueAt(row, 0).toString(); // MADT
                ResultSet rs = stmt.executeQuery("SELECT * FROM CTDT WHERE MADT = '" + maDT + "'");
                doc.insertString(doc.getLength(), "\n--- Chi ti·∫øt ƒë∆°n thu·ªëc ---\n", boldAttr);
                while (rs.next()) {
                    doc.insertString(doc.getLength(), "S·∫£n ph·∫©m: " + rs.getString("MASP") + ", SL: " + rs.getInt("SOLUONG") + ", ƒê∆°n gi√°: " + rs.getDouble("DONGIA") + ", Th√†nh ti·ªÅn: " + rs.getDouble("THANHTIEN") + "\n", normalAttr);
                }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        textPane.setCaretPosition(0); // ƒê·∫∑t con tr·ªè v·ªÅ ƒë·∫ßu => kh√¥ng cu·ªôn xu·ªëng cu·ªëi

        JButton closeButton = new JButton("ƒê√≥ng");
        closeButton.setBackground(new Color(0x2B4A59));
        closeButton.setForeground(Color.WHITE);
        closeButton.setFocusPainted(false);
        closeButton.addActionListener(e -> dialog.dispose());

        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(new Color(0xd9eef2)); // N·ªÅn pannel button c√πng m√†u n·ªÅn h·ªôp tho·∫°i
        buttonPanel.add(closeButton);

        contentPanel.add(new JScrollPane(textPane), BorderLayout.CENTER);
        contentPanel.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setContentPane(contentPanel);
        dialog.setSize(450, 350);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {   
                new Prescription("U002").setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Prescription.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Prescription.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
}


// Renderer t√πy ch·ªânh ƒë·ªÉ ƒë·ªïi m√†u vƒÉn b·∫£n trong c·ªôt "Tr·∫°ng th√°i thanh to√°n"
class StatusCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        String status = value != null ? value.toString().trim().toLowerCase() : "";
        switch (status) {
            case "ch∆∞a thanh to√°n":
                c.setForeground(Color.RED);
                break;
            case "ƒë√£ thanh to√°n":
                c.setForeground(new Color(0x2E7D32)); // Xanh l√° ƒë·∫≠m
                break;
            default:
                c.setForeground(Color.BLACK);
                break;
        }
        return c;
    }
}



